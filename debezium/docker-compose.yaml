version: '3.8'

services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.4.4
#    hostname: zookeeper
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  broker:
#    image: confluentinc/cp-kafka:7.4.4
#    hostname: broker
#    container_name: broker
#    depends_on:
#      - zookeeper
#    ports:
#      - "29092:29092"
#      - "9999:9999"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: localhost
#
#  connect:
#    image: confluentinc/cp-kafka-connect:7.4.4
#    hostname: connect
#    container_name: connect
#    depends_on:
#      - broker
#    ports:
#      - "8083:8083"
#    command:
#      - bash
#      - -c
#      - |
#        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest
#        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:latest
#        confluent-hub install --no-prompt debezium/debezium-connector-mysql:latest
#        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:latest
#        /etc/confluent/docker/run
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
#      CONNECT_REST_ADVERTISED_HOST_NAME: connect
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
#      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
#      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=connect -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=5555 -Dcom.sun.management.jmxremote.port=5555

  mysql:
    image: debezium/example-mysql:1.7
    hostname: mysql
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    ports:
      - '4306:3306'
    networks:
      - kafka-platform

#  mongodb:
#    image: bitnami/mongodb:7.0
#    hostname: mongodb
#    container_name: mongodb
#    depends_on:
#      - broker
#    environment:
#      - MONGODB_ROOT_PASSWORD=password123
#      - MONGODB_USERNAME=ec_user
#      - MONGODB_PASSWORD=ec_password
#      - MONGODB_DATABASE=ec_order
#    ports:
#      - '27027:27017'

  mongodb-primary:
    image: docker.io/bitnami/mongodb:7.0
    hostname: mongodb-primary
    container_name: mongodb-primary
    environment:
      - MONGODB_DATABASE=ec_order
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - 'mongodb_master_data:/bitnami/mongodb'
    ports:
      - '27027:27017'
    networks:
      - kafka-platform

  mongodb-secondary:
    image: docker.io/bitnami/mongodb:7.0
    hostname: mongodb-secondary
    container_name: mongodb-secondary
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    ports:
      - '27028:27017'
    networks:
      - kafka-platform

  mongodb-arbiter:
    hostname: mongodb-arbiter
    container_name: mongodb-arbiter
    image: docker.io/bitnami/mongodb:7.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    networks:
      - kafka-platform
#
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - 9082:8080
#    depends_on:
#      - broker
#    environment:
#      KAFKA_CLUSTERS_0_NAME: broker_1
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092

volumes:
  mongodb_master_data:
    driver: local

networks:
  kafka-platform:
    name: kafka-platform
    driver: bridge